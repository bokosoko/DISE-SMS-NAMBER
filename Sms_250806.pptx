You are a senior full-stack developer with expertise in telecommunications and web application development. Your task is to create a comprehensive technical specification and implementation plan for a disposable SMS receiving platform.
  
## Project Overview:
Design and implement a web-based platform that provides temporary phone numbers for receiving SMS messages and OTP codes. The system must handle high-volume message traffic with 100% reliability and real-time delivery.
  
## Core Requirements:
  
### Functional Requirements:
- **SMS Reception**: Accept and display all incoming SMS/OTP messages for any registered phone number
- **Number Management**: Support unlimited temporary phone number additions with instant activation
- **Real-time Display**: Show messages immediately upon receipt with live updates
- **Message Persistence**: Store all messages with full history and search capabilities
- **Multi-user Support**: Handle concurrent users accessing different temporary numbers
  
### Performance Requirements:
- **Delivery Rate**: Achieve 100% SMS message reception and display
- **Response Time**: Display messages within 2 seconds of receipt
- **Scalability**: Support 10,000+ concurrent users and 1M+ messages daily


--- SLIDE 1 ---


- **Uptime**: Maintain 99.9% system availability
  
## Technical Specifications Required:
  
### 1. Backend Architecture & SMS Integration
**SMS Gateway Implementation:**
- Provide complete integration code for at least 2 providers (Twilio + one alternative)
- Include webhook handlers for incoming SMS processing
- Implement failover logic with automatic provider switching
- Add delivery confirmation and retry mechanisms
  
**API Design:**
- Design RESTful endpoints with OpenAPI 3.0 specification
- Include rate limiting (100 requests/minute per user)
- Implement proper HTTP status codes and error handling
- Add API versioning strategy
  
**Database Design:**
- Create optimized schema for messages, numbers, users, and system logs
- Include proper indexing strategy for fast message retrieval
- Implement data retention policies (auto-delete after 24 hours)
- Add database connection pooling and query optimization
  
### 2. Real-time Communication System
- Implement WebSocket connections for instant message delivery
- Add fallback to Server-Sent Events for compatibility
- Include connection management and automatic reconnection
- Provide message queuing for offline users
  
### 3. Frontend Application


--- SLIDE 2 ---


**User Interface Requirements:**
- Responsive design supporting mobile, tablet, and desktop
- Number selection interface with availability checking
- Message display with filtering (OTP detection, sender sorting)
- Auto-refresh functionality with manual refresh option
- Copy-to-clipboard for messages and phone numbers
  
**Technical Implementation:**
- Use modern JavaScript framework (React/Vue/Angular)
- Implement state management for real-time updates
- Add progressive web app (PWA) capabilities
- Include accessibility features (WCAG 2.1 AA compliance)
  
### 4. Security & Privacy
**Authentication & Authorization:**
- Implement JWT-based authentication with refresh tokens
- Add optional user registration with email verification
- Include guest access with session-based temporary accounts
- Implement RBAC for admin functions
  
**Data Protection:**
- Encrypt sensitive data at rest using AES-256
- Implement TLS 1.3 for all communications
- Add input validation and SQL injection prevention
- Include XSS and CSRF protection
  
### 5. Admin Dashboard & Monitoring
- System health monitoring with real-time metrics
- SMS provider status and delivery rate tracking
- User activity analytics and usage statistics
- Message content moderation and spam detection
- Automated alerting for system issues


--- SLIDE 3 ---


## Deliverables Specification:
  
### 1. Complete Source Code
- Well-documented codebase with inline comments
- Modular architecture with separation of concerns
- Configuration files for different environments
- Docker containerization with docker-compose setup
  
### 2. Database & Deployment
- Migration scripts with rollback capabilities
- Seed data for testing and development
- Production deployment guide with server requirements
- CI/CD pipeline configuration (GitHub Actions/Jenkins)
  
### 3. Documentation Package
- API documentation with Postman collection
- Database schema documentation with ER diagrams
- Installation and configuration guide
- User manual with screenshots
- Troubleshooting guide with common issues
  
### 4. Testing & Quality Assurance
- Unit tests with 80%+ code coverage
- Integration tests for SMS workflows
- Load testing scripts for performance validation
- Security testing checklist and penetration test results
  
## Technical Stack Constraints:
- **Backend**: Node.js with Express.js or Python with FastAPI
- **Database**: PostgreSQL with Redis for caching
- **Frontend**: React.js with TypeScript


--- SLIDE 4 ---


- **Real-time**: Socket.io or native WebSockets
- **Deployment**: Docker containers on AWS/DigitalOcean
- **Monitoring**: Prometheus + Grafana or similar
  
## Success Criteria:
- System processes 1000+ SMS messages per hour without delays
- Zero message loss during normal operations
- Page load times under 3 seconds
- Mobile-responsive interface works on all major browsers
- Complete deployment possible within 30 minutes using provided scripts
  
Provide a production-ready solution with step-by-step implementation instructions, complete code examples, architectural diagrams, and detailed explanations for each component. Include specific code snippets for critical functions and comprehensive error handling throughout the system.


--- SLIDE 5 ---

